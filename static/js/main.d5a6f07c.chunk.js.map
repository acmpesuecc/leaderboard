{"version":3,"sources":["logo.jpeg","App.js","serviceWorker.js","index.js"],"names":["calculateTimeLeft","year","Date","getFullYear","difference","timeLeft","days","Math","floor","hours","minutes","seconds","App","useState","setTimeLeft","useEffect","timer","setTimeout","clearTimeout","timerComponents","Object","keys","forEach","interval","push","result","setResult","searchQuery","setSeachQuery","fuzzy","setFuzzy","fetchData","a","axios","method","url","fresult","data","console","log","result_array","map","keyName","i","username","score","sortedResults","sort","first","second","className","src","logo","alt","length","onClick","type","onChange","event","keyword","text","target","value","filter","object","fuzzysearch","toLowerCase","placeholder","counter","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d5a6f07c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.725ffc3c.jpeg\";","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport logo from './logo.jpeg';\n\nimport fuzzysearch from 'fuzzysearch';\n\nimport './App.css';\n\n\nconst calculateTimeLeft = () => {\n  let year = new Date().getFullYear();\n  let difference = +new Date(`10/26/${year}`) - +new Date();\n  let timeLeft = {};\n\n  if (difference > 0) {\n    timeLeft = {\n      days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n      hours: Math.floor((difference / (1000 * 60 * 60)) % 24) -1,\n      minutes: Math.floor((difference / 1000 / 60) % 60),\n      seconds: Math.floor((difference / 1000) % 60)\n  };\n}\nreturn timeLeft;\n}\n\nfunction App() {\n\nconst [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\nconst [year] = useState(new Date().getFullYear());\n\nuseEffect(() => {\n  const timer = setTimeout(() => {\n    setTimeLeft(calculateTimeLeft());\n  }, 1000);\n  return () => clearTimeout(timer);\n});\n\n\nconst timerComponents = [];\n\nObject.keys(timeLeft).forEach((interval) => {\n  if (!timeLeft[interval]) {\n    return;\n  }\n\n  timerComponents.push(\n    <span>\n      {timeLeft[interval]} {interval}{\" \"}\n    </span>\n  );\n});\n\n\n  const [result, setResult] = useState({\"No one yet!\":\"???\"});\n\n  const [searchQuery, setSeachQuery] = useState(\"\");\n\n  const [fuzzy, setFuzzy] = useState();\n\n  const fetchData = async () =>{\n      const fresult = await axios({\n        method: 'get',\n        url: 'https://acm-bounty.herokuapp.com/scores'\n      });\n      setResult(fresult.data);\n      console.log(result);\n  }\n\n  useEffect( () => {\n    fetchData();\n  }, []);\n\n  const url = `https://github.com/`;\n\n  // serialize result into object array, so that we can sort by key\n  var result_array = [];\n\n  // push each new user record as an object to the array\n  Object.keys(result).map((keyName, i) => {\n    result_array = [...result_array, {username: keyName, score: result[keyName]}];\n    return null\n  })\n\n  // sort the result in descending order of score\n  var sortedResults = result_array.sort((first, second) => {\n    return second.score - first.score;\n  })\n\n  function Search(keyword) {\n    var temp = sortedResults.filter(object => {\n      return fuzzysearch(keyword.toLowerCase(), object.username.toLowerCase());\n    })\n    return temp;\n  }\n\n  function handleSearchBarChange(event){\n    var text = event.target.value;\n    setSeachQuery(text)\n    console.log(\"searching \");\n    console.log(searchQuery);\n    setFuzzy(Search(searchQuery));\n    console.log(fuzzy);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div>\n        <h1>HacktoberFest {year} Countdown</h1>\n    {timerComponents.length ? timerComponents : <span>Time's up!</span>}\n </div>  <p>\n        <h1>Leaderboard</h1>\n        </p>\n        <div className='controls'>\n          <button onClick={() => fetchData()}>Click to reload!</button>\n          <div className='searchbar'>\n            <input type=\"text\" className='search-text' onChange={handleSearchBarChange} placeholder=\"search by username\" />\n            <button className='clearSearch' onClick={() => setFuzzy(null)}> X </button>\n          </div>\n        </div>\n\n        {fuzzy && searchQuery && (\n            <table className={`${searchQuery ? 'fuzzy-results':null} table table-dark`}>\n              <thead>\n                <tr>\n                  <th>Rank</th><th>Github Username</th><th>Total Score</th>\n                </tr>\n              </thead>\n              <tbody>\n\n                {fuzzy.map((object, counter) => (\n                  <tr key={object.username}>\n                    <td> {counter + 1} </td>\n                    <td className=\"table_profile\"><img src={`${url}${object.username}.png`} alt={object.username}/><a href = {url+`${object.username}`} target=\"_blank\" rel='noreferrer'>{object.username}</a></td>\n                    <td>{object.score}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n        )}\n\n        <br/>\n\n        <table className=\"table table-dark\">\n        <thead>\n        <tr>\n          <th>Rank</th><th>Github Username</th><th>Total Score</th>\n        </tr>\n        </thead>\n        <tbody>\n\n          {sortedResults && sortedResults.map((object, counter) => (\n            <tr key={object.username}>\n              <td> {counter + 1} </td>\n              <td className=\"table_profile\"><img src={`${url}${object.username}.png`} alt={object.username}/><a href = {`${url}${object.username}`} target=\"_blank\" rel='noreferrer'>{object.username}</a></td>\n              <td>{object.score}</td>\n            </tr>\n          ))}\n        </tbody>\n        </table>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}